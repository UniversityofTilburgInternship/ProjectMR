module Games

open "UnityEngine.dll"
open UnityEngine

worldEntity World = {
AvatarGen : AvatarGenerator
Persons : [Person]
derp : bool

  rule derp =
    HelperFunctions.Log(derp)
    yield derp

  rule Persons =
    wait AvatarGen.AutoGenerateCharacters
    for parsedperson in PersonParser.ParsedPersons do
      let personalities = parsedperson.Item2
      yield(Person.Create(
        [for personality in personalities do
           select (personality.Item1, personality.Item2)],
        parsedperson.Item1)) :: Persons
    wait false
   
  rule Persons =
    wait not AvatarGen.AutoGenerateCharacters
    for x in[0..AvatarGen.Amount - 1] do
      yield(Person.Create(
        [for characteristic in AvatarGen.SettingsList do
          select (characteristic.Item1,
            Random.Range(characteristic.Item2.Item1,
            characteristic.Item2.Item2))], "random")) :: Persons    
    wait false

  Create() =
    let avaGen = AvatarGenerator.Find()
    {
      Persons = []
      AvatarGen = avaGen
      derp = true
    }
}

entity Event = {
inherit UnityEvent

  rule Completeness =
    wait 2.5f
    if(UnityEventController.IsEventReady(this.Id)) then
      HelperFunctions.Log("Completenesss: " + Completeness)
      yield Completeness + 10
      if(Completeness >= 100) then
        UnityEvent.Destroy()
        yield Completeness
    else
      yield 0

  Create(Type : string) =
  let unity_event = UnityEvent.SpawnRandomEvent(Type)
  {
    UnityEvent = unity_event
  }
}


entity Person = {
inherit UnityNpc
settings : [(int * int)]
actionIds : [int]
PositionAvailable : bool

    rule actionIds, PositionAvailable =
      wait IsEventActor
      UnityNpc.UpdateCurrentNodesCollection()
      yield UnityNpc.ActionsToPerform, false

    rule actionIds, PositionAvailable =
      wait IsEventActor
      wait not IsEventActor
      UnityNpc.UpdateCurrentNodesCollection()
      yield UnityNpc.ActionsToPerform, false

    rule IsInEvent =
      wait 1.0f
      yield UnityNpc.IsInterestedInEvent()

    rule actionIds, PositionAvailable =
      wait PositionAvailable
      wait actionIds.Count > 0
      let actionToExecute = actionIds.[0]
      let destination = UnityNpc.GetClaimedPosition(actionToExecute)
      UnityNpc.MoveTo(actionToExecute)
      let distanceToDestination = Vector3.Distance(Position, destination)
      //Execute action animation, then remove action that was just executed from actionIds
      if (distanceToDestination < 2.2f) then
        UnityNpc.UpdateAccumulatedValues(actionToExecute)
        wait UnityNpc.PlayAnimation(actionToExecute)
        //Cant remove if currentNodesCollection updated.
        UnityNpc.RemoveClaimToPosition(actionToExecute)
        yield [for id in actionIds do
                where (not (id = actionToExecute))
                select id], false
        wait not IsEventActor

    rule actionIds, PositionAvailable =
      wait not PositionAvailable
      wait actionIds.Count > 0
      HelperFunctions.Log("actionIds.Count > 0")
      let actionToExecute = actionIds.[0]
      if(UnityNpc.IsPositionAvailable(actionToExecute)) then
        HelperFunctions.Log("UnityNpc.IsPositionAvailable")
        UnityNpc.ClaimPosition(actionToExecute)
        yield actionIds, true   
      else
        HelperFunctions.Log("else")
        //If we cannot get a position, skip this action.
        yield [for id in actionIds do
               where (not (id = actionToExecute))
               select id], false

    rule actionIds, PositionAvailable =
      yield actionIds, false
      UnityNpc.UpdateCurrentNodesCollection()
      yield UnityNpc.ActionsToPerform, false
      wait 25.0f
      wait not IsInEvent

    rule actionIds, PositionAvailable =
      wait IsInEvent
      wait not IsInEvent
      UnityNpc.FreeEventActors()
      UnityNpc.UpdateCurrentNodesCollection()
      yield UnityNpc.ActionsToPerform, false

    rule actionIds, PositionAvailable =
      wait IsInEvent
      UnityNpc.UpdateCurrentNodesCollection()
      yield UnityNpc.ActionsToPerform, false
      wait 2.0f

    Create(Settings : [(int * int)], modelName : string) =
    let unity_npc = UnityNpc.Spawn(Settings, modelName)
    {
        settings = Settings
        UnityNpc = unity_npc
        PositionAvailable = false
        actionIds = []
    }
}